/* -*- c -*-*/
#include "misc.h"
#include <cgreen/mocks.h>

void scanJarFilesForTagSearch(void) {
  mock();
}

void dumpArguments(int nargc, char **nargv) {
  mock(nargc, nargv);
}

void symbolRefItemDump(ReferenceItem *ss) {
  mock(ss);
}

void typeSPrint(char *buff, int *size, TypeModifier *t, char *name, int dclSepChar, bool typedefexp,
                int longOrShortName, int *oNamePos) {
  mock(buff, size, t, name, dclSepChar, typedefexp, longOrShortName, oNamePos);
}

void macroDefinitionSPrintf(char *buff, int *size, char *name1, char *name2, int argc, char **argv, int *oNamePos) {
  mock(buff, size, name1, name2, argc, argv, oNamePos);
}

char *strmcpy(char *dest, char *src) {
  return (char *) mock(dest, src);
}

char *simpleFileName(char *fullFileName) {
  return (char *) mock(fullFileName);
}

char *directoryName_static(char *fullFileName) {
  return (char *) mock(fullFileName);
}

char *simpleFileNameWithoutSuffix_st(char *fullFileName) {
  return (char *) mock(fullFileName);
}

bool containsWildcard(char *ss) {
  return (bool) mock(ss);
}

bool shellMatch(char *string, int stringLen, char *pattern, bool caseSensitive) {
  return (bool) mock(string, stringLen, pattern, caseSensitive);
}

void expandWildcardsInOnePath(char *filename, char *outpaths, int availableSpace) {
  mock(filename, outpaths, availableSpace);
}

void expandWildcardsInPaths(char *paths, char *outpaths, int availableSpace) {
  mock(paths, outpaths, availableSpace);
}

char *getRealFileName_static(char *fn) {
  return (char *) mock(fn);
}

bool stringContainsSubstring(char *s, char *subs) {
  return (bool) mock(s, subs);
}

int substringIndex(char *s, char *subs) {
  return (int) mock(s, subs);
}

bool fileNameHasOneOfSuffixes(char *fname, char *suffs) {
  return (bool) mock(fname, suffs);
}

int mapPatternFiles(char *pattern, void (*fun)(char *file, char *a1, char *a2, Completions *a3, void *a4, int *a5), char *a1, char *a2, Completions *a3, void *a4, int *a5) {
  return (int) mock(pattern, fun, a1, a2, a3, a4, a5);
}

void mapOverDirectoryFiles(char *dirname, void (*fun)(char *file, char *a1, char *a2, Completions *a3, void *a4, int *a5), int allowEditorFilesFlag, char *a1, char *a2, Completions *a3, void *a4, int *a5) {
  mock(dirname, fun, allowEditorFilesFlag, a1, a2, a3, a4, a5);
}

char *lastOccurenceInString(char *string, int ch) {
  return (char *) mock(string, ch);
}

char *lastOccurenceOfSlashOrBackslash(char *string) {
  return (char *) mock(string);
}

char *getFileSuffix(char *fn) {
  return (char *) mock(fn);
}

int pathncmp(char *path1, char *path2, int length, bool caseSensitive) {
  return (int) mock(path1, path2, length, caseSensitive);
}

int compareFileNames(char *ss1, char *ss2) {
  return (int) mock(ss1, ss2);
}

int filenameCompare(char *ss1, char *ss2, int n) {
  return (int) mock(ss1, ss2, n);
}

void prettyPrintLinkName(char *ff, char *javaLinkName, int maxlen, int argsStyle) {
  mock(ff, javaLinkName, maxlen, argsStyle);
}

char *simpleFileNameFromFileNum(int fnum) {
  return (char *) mock(fnum);
}

void sprintfSymbolLinkName(SymbolsMenu *ss, char *ttt) {
  mock(ttt, ss);
}

bool requiresCreatingRefs(ServerOperation operation) {
  return (bool) mock(operation);
}

void formatOutputLine(char *tt, int startingColumn) {
  mock(tt, startingColumn);
}

void getBareName(char *name, char **start, int *len) {
    mock(name, start, len);
}

Language getLanguageFor(char *inFileName) {
    return (Language)mock(inFileName);
}
