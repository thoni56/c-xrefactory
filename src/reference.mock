#include <cgreen/mocks.h>

#include "reference.h"


Reference *newReference(Position position, Usage usage, Reference *next) {
    Reference *reference = malloc(sizeof(Reference));
    reference->usage = usage;
    reference->position = position;
    reference->next = next;
    return reference;
}

Reference makeReference(Position position, Usage usage, Reference *next) {
    Reference reference;
    reference.usage = usage;
    reference.position = position;
    reference.next = next;
    return reference;
}

void fillReferenceItem(ReferenceItem *referencesItem, char *name, int includedFileNumber, Type symType,
                       Storage storage, Scope scope, Visibility visibility) {
    referencesItem->linkName = name;
    referencesItem->includedFileNumber = includedFileNumber;
    referencesItem->references = NULL;
    referencesItem->next = NULL;
    referencesItem->type = symType;
    referencesItem->storage = storage;
    referencesItem->scope = scope;
    referencesItem->visibility = visibility;
}

ReferenceItem makeReferenceItem(char *name, Type type, Storage storage, Scope scope, Visibility visibility,
                                int includedFileNumber) {
    ReferenceItem item;
    fillReferenceItem(&item, name, includedFileNumber, type, storage, scope, visibility);
    return item;
}

Reference *duplicateReferenceInCxMemory(Reference *r) {
    return (Reference *) mock(r);
}

void freeReferences(Reference *references) {
    mock(references);
}

Reference **addToReferenceList(Reference **list, Position pos_arg, Usage usage_arg) {
    Position *pos = &pos_arg;
    Usage *usage = &usage_arg;
    return (Reference **) mock(list, usage, pos);
}

bool isReferenceInList(Reference *r, Reference *list) {
    return (bool) mock(r, list);
}

Reference *addReferenceToList(Reference **rlist, Reference *ref) {
    return (Reference *) mock(rlist, ref);
}

int fileNumberOfReference(Reference ref) {
    Reference *reference = &ref;
    return mock(reference);
}
