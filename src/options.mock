/* -*- c -*-*/
#include "options.h"
#include <cgreen/mocks.h>

Options options;
Options savedOptions;
Options presetOptions;

void aboutMessage(void) {
    mock();
}

void processFileArguments(void) {
    mock();
}

void processOptions(int argc, char **argv, ProcessFileArguments infilesFlag) {
  mock(argc, argv, infilesFlag);
}

void setOptionVariable(char *name, char *val) {
  mock(name, val);
}

char *getOptionVariable(char *name) {
    return (char *)mock(name);
}

void deepCopyOptionsFromTo(Options *src, Options *dest) {
  mock(dest, src);
}

char *allocateStringForOption(char **dest, char *text) {
    return (char *)mock(dest, text);
}

void addSourcePathsCut(void) {
  mock();
}

void addToStringListOption(StringList **optlist, char *argvi) {
    mock(optlist, argvi);
}

void getXrefrcFileName(char *ttt) {
  mock(ttt);
}

void dirInputFile(char *file, char *a1, char *a2, Completions *a3, void *a4, int *a5) {
  mock(file, a1, a2, a3, a4, a5);
}

char *getJavaHome(void) {
  return (char *) mock();
}

void getJavaClassAndSourcePath(void) {
  mock();
}

bool packageOnCommandLine(char *packageName) {
  return (bool) mock(packageName);
}

char *expandPredefinedSpecialVariables_static(char *variable, char *inputFilename) {
  return (char *) mock(variable);
}

bool readOptionsFromFileIntoArgs(FILE *file, int *outArgc, char ***outArgv, MemoryKind memoryKind,
                                 char *fileName, char *project, char *unused) {
  return (bool) mock(file, outArgc, outArgv, memoryKind, fileName, project);
}

void readOptionsFromFile(char *fileName, int *outArgc, char ***outArgv, char *sectionFile, char *project) {
  mock(fileName, outArgc, outArgv, sectionFile, project);
}

void readOptionsFromCommand(char *command, int *outArgc, char ***outArgv, char *sectionFile) {
  mock(command, outArgc, outArgv, sectionFile);
}

void javaSetSourcePath(bool defaultClassPathAllowed) {
  mock(defaultClassPathAllowed);
}

bool referenceFileCountMatches(int newRefNum) {
  return (int) mock(newRefNum);
}

char *findConfigFile(char *cwd) {
    return (char *)mock(cwd);
}

void getPipedOptions(int *outNargc, char ***outNargv) {
  mock(outNargc, outNargv);
}

void searchStandardOptionsFileAndProjectForFile(char *fileName, char *optionsFilename, char *foundProjectName) {
  mock(fileName, optionsFilename, foundProjectName);
}
