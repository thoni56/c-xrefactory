/*

  .c template for hashed table of lists

  See hashtab.tc for usage.

  TOOD: unsure about exact difference between hashtab and hashlist...

*/

#define GLUE(a,b) a ## b
#define CONCAT(a,b) GLUE(a,b)

/* Here we create TAB_TYPE and FUN_PREFIX from TAB_NAME */
#define HASH_FUN_PREFIX HASH_TAB_NAME


void CONCAT(HASH_FUN_PREFIX,NoAllocInit)(HASH_TAB_TYPE *table, int size) {
    table->size = size;
    memset(table->tab, 0, sizeof(HASH_ELEM_TYPE *)*table->size);
}


void CONCAT(HASH_FUN_PREFIX,Init)(HASH_TAB_TYPE *table, int size) {
    table->tab = StackMemoryAllocC(size, HASH_ELEM_TYPE *);
    CONCAT(HASH_FUN_PREFIX,NoAllocInit)(table, size);
}


/* Use NULL for position and/or foundMemberPointer if you are not interested in them */
bool CONCAT(HASH_FUN_PREFIX,IsMember)(
    HASH_TAB_TYPE *table,
    HASH_ELEM_TYPE *element,
    int *position,              /* OUT */
    HASH_ELEM_TYPE **foundMemberPointer /* OUT */
) {
    unsigned index;
    HASH_ELEM_TYPE *pp;

    index = HASH_FUN(element);
    index = index % table->size;
    if (position)
        *position = index;
    assert(table->tab != NULL);
    for (pp=table->tab[index]; pp!=NULL; pp=pp->next) {
        if (HASH_ELEM_EQUAL(pp, element)) {
            if (foundMemberPointer)
                *foundMemberPointer = pp;
            return true;
        }
    }
    *foundMemberPointer = NULL;
    return false;
}


int CONCAT(HASH_FUN_PREFIX,NextMember)(
    HASH_ELEM_TYPE *element,
    HASH_ELEM_TYPE **foundMemberPointer
) {
    HASH_ELEM_TYPE *pp;
    assert(*foundMemberPointer);
    for (pp= (*foundMemberPointer)->next; pp!=NULL; pp=pp->next) {
        if (HASH_ELEM_EQUAL(pp, element)) {
            *foundMemberPointer = pp;
            return(1);
        }
    }
    *foundMemberPointer = NULL;
    return(0);
}


bool CONCAT(HASH_FUN_PREFIX,Delete)(
    HASH_TAB_TYPE *table,
    HASH_ELEM_TYPE *element
) {
    unsigned index;
    HASH_ELEM_TYPE **pp;
    index = HASH_FUN(element);
    index = index % table->size;
    assert(table->tab!=NULL);
    for (pp= &(table->tab[index]); *pp!=NULL; pp= &((*pp)->next)) {
        if (HASH_ELEM_EQUAL((*pp), element)) {
            *pp = (*pp)->next;
            return true;
        }
    }
    return false;
}


bool CONCAT(HASH_FUN_PREFIX,DeleteExact)(
    HASH_TAB_TYPE *table,
    HASH_ELEM_TYPE *element
) {
    unsigned index;
    HASH_ELEM_TYPE **pp;

    index = HASH_FUN(element);
    index = index % table->size;
    assert(table->tab!=NULL);
    for (pp= &(table->tab[index]); *pp!=NULL; pp= &((*pp)->next)) {
        if ((*pp) == element) {
            *pp = (*pp)->next;
            return true;
        }
    }
    return false;
}


void CONCAT(HASH_FUN_PREFIX,Set) (
    HASH_TAB_TYPE *table,
    HASH_ELEM_TYPE *element,
    int position
) {
    element->next = table->tab[position];
    table->tab[position] = element;
}


void CONCAT(HASH_FUN_PREFIX,SetLast) (
    HASH_TAB_TYPE *table,
    HASH_ELEM_TYPE *element,
    int position
) {
    HASH_ELEM_TYPE **pp;
    for (pp= &(table->tab[position]); *pp!=NULL; pp= &((*pp)->next))
        ;
    *pp = element;
    element->next = NULL;
}


int CONCAT(HASH_FUN_PREFIX,Add) (
    HASH_TAB_TYPE *table,
    HASH_ELEM_TYPE *element
) {
    HASH_ELEM_TYPE *origin;
    int position;
    if (! CONCAT(HASH_FUN_PREFIX,IsMember)(table,element,&position,&origin)) {
        CONCAT(HASH_FUN_PREFIX,Set) (table,element,position);
    }
    return position;
}


void CONCAT(HASH_FUN_PREFIX,Map)(
    HASH_TAB_TYPE *table,
    void (*fun)(HASH_ELEM_TYPE *)
) {
    for (int i=0; i<table->size; i++) {
        for (HASH_ELEM_TYPE *element=table->tab[i]; element!=NULL; element=element->next)
            (*fun)(element);
    }
}


void CONCAT(HASH_FUN_PREFIX,Map2)(
    HASH_TAB_TYPE *table,
    void (*fun)(HASH_ELEM_TYPE *, void *),
    void *a
) {
    for (int i=0; i<table->size; i++) {
        for (HASH_ELEM_TYPE *element=table->tab[i]; element!=NULL; element=element->next)
            (*fun)(element, a);
    }
}


void CONCAT(HASH_FUN_PREFIX,Map3)(
    HASH_TAB_TYPE *table,
    void (*fun)(int)
) {
    for (int i=0; i<table->size; i++) {
        if (table->tab[i] != NULL)
            (*fun)(i);
    }
}


void CONCAT(HASH_FUN_PREFIX,Map5)(
    HASH_TAB_TYPE *table,
    void (*fun)(HASH_ELEM_TYPE *, void *),
    void *arg
) {
    HASH_ELEM_TYPE *pp;
    for (int i=0; i<table->size; i++) {
        for(pp=table->tab[i]; pp!=NULL; pp=pp->next)
            (*fun)(pp, arg);
    }
}


#undef GLUE
#undef CONCAT
#undef HASH_TAB_TYPE
#undef HASH_FUN_PREFIX

/* Local variables: */
/* Mode: c          */
/* End:             */
