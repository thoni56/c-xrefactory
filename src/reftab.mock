/* -*- c -*-*/
#include <cgreen/mocks.h>
#include "reftab.h"

ReferenceTable referenceTable;

// Actual implementation, but malloc() i.s.o. cxAlloc()
void initReferenceTable(int size) {
    referenceTable.tab = malloc(size*sizeof(ReferenceItem *));
    referenceTable.size = size;
    memset(referenceTable.tab, 0, sizeof(ReferenceItem *)*size);
}

void refTabNoAllocInit(ReferenceTable *table, int size) {
    mock(table, size);
}

bool isMemberInReferenceTable(ReferenceItem *element, int *position, ReferenceItem **foundMemberPointer
) {
    return (bool)mock(element, position, foundMemberPointer);
}

bool refTabNextMember(ReferenceItem *element, ReferenceItem **original) {
    return (bool)mock(element, original);
}

void pushReferenceItem(ReferenceItem *element, int position) {
    mock(element, position);
}

int addToReferencesTable(ReferenceItem *referencesItem) {
    return mock(referencesItem);
}

void mapOverReferenceTable(void (*fun)(ReferenceItem *)) {
    mock(fun);
}

void mapOverReferenceTableWithPointer(void (*fun)(ReferenceItem *, void *), void *pointer) {
    mock(fun, pointer);
}

void mapOverReferenceTableWithIndex(void (*fun)(int)) {
    mock(fun);
}

int getNextExistingReferenceItem(int index) {
    return (int)mock(index);
}

ReferenceItem *getReferenceItem(int index) {
    return (ReferenceItem *)mock(index);
}

void setReferenceItem(int index, ReferenceItem *item) {
    mock(index, item);
}
