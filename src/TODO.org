# -*- org-todo-keyword-faces: (("DOING" . "orange")) -*-
#+TODO: TODO(t) DOING(i) | DONE(d)

There are a *lot* of things to do to make c-xref into modern C.

(This file is structured for Emacs org-mode...)

Current Mikado:
* TRYING Break out server from main
** DONE Move mainCallEditServerInit() to server.c
*** DONE initAvailableRefactorings() to be accessible in server.c
**** DONE import cxref.h
*** DONE processFileArguments() static in main
**** DONE move processFileArguments() to options.c
***** DONE scheduleFileArgumentsToFileTable()

** DONE Move mainCallEditServer() to server.c
** DONE Move editServer() to server.c
** DONE Move presetEditServerFileDependingStatics() to server.c
** DONE Move editServerProcessFile() to server.c
** DONE Move editServerSinglePass() to server.c
*** DONE symbolCanBeIdentifiedByPosition()
*** DONE scheduleFileUsingTheMacro()
*** DONE editServerParseInputFile()
*** DONE smartReadReferences()
*** DONE fileProcessingInitialisations()
*** DONE closeInputFile()
*** DONE gotoOnLineCxRefs()
*** DONE addThisFileDefineIncludeReference()



* DOING Figure out, and if possible, clean up, how 'refactory' calls 'server'
  Currently it is done using the argv vector, would probably be cleaner using a specific option struct
* DOING BUG: Selecting automatic project selection after having set a specific does not seem to work
* DOING Turn uint32-test into a test for all C99 predefined symbols to ensure every compiler/environment gets them defined
  https://en.cppreference.com/w/c/types/integer
* DOING Select extra defines as necessary depending on compiler discovered as a sideeffect of discoverStandardIncludes()
** DONE clang definition table
** TODO Use compiler identification to set extra needed definitions for clang
* TODO Project local .c-xrefrc with relative file paths so it can be checked in to a repo
   We could start with having same format but how to handle project names?
** TODO Make "get project" lookup the directory tree for closest .c-xrefrc that covers the file
   Maybe it could return the path to the project file as the name of the project, then...
   NOTE: any -prune should be considered too
** TODO A "-p" should first look at the path of the "project name" to see if there is a .c-xrefrc there
** TODO Change to having reference file in the project tree?
   This needs some thinking. Find it by looking upwards in the dir, on
   create we need to ask where to store it starting with current
   directory. This could enable storing non-absolute filenames in the
   xrefs, they should be relative to where the db is.
** TODO Do we even need the db? Probably, for very large projects it's too slow to always generate
* TODO Set xref2 to true as default and then convert all test cases that fail, remove the option
  Hmmm. We only want that when running as a server, right?
** TODO Figure out in which regime xref2 is relevant
* TODO dumpOut, errOut - figure out how they should be set in various scenarios
* TODO ROADMAP
** TODO Project local .c-xrefrc with relative file paths so it can be checked in to a repo
** TODO Cleaner interface Refactorer -> Server/Tag-generator
*** TODO Separate refactory options into separate struct
*** TODO Restructure option handling into -refactory, -server, -generate(?)
    those are main options, you can only have one, and selecting one
    will allow a set of separate options valid for that "mode"
** TODO LSP-like protocol (possibly also fulfill LSP functions)
* TODO Store Xrefs in .c-xrefdb parallel to the .c-xrefrc used, remove possibility to define it
  How to make this backwards compatible?
* TODO Header files. There are a number of sections in the proto.h that
  indicates which file/module it declares an externa interface for. We
  should move that to a <module>.h file instead. Just watchout for
  datatypes that need to be in proto.h because of the strFill et. al
  generation. (Gone now!) Not all does, though...
* TODO BUG: sometimes cxref data gets out of sync with actual code (in Emacs)
  Unknown if it has to do with buffer management, it is not possible to reproduce yet
* TODO BUG: an unterminated "assert(" (with the c-xref def of it: MACRO) breaks
  with error message "size of #macro_argument exceeded MACRO_UNIT_SIZE"
* TODO Cleanup generateOnlineCxref() which only generates a GOTO
* TODO Push options.xref2 into ppc...() functions or create if necessary
* TODO All fillXXX() should not be mocked but have the same body as the real one
* TODO Handle void as no parameters in formal argument lists, e.g. when refactoring them
* TODO displayingErrorMessages() seems to be duplicated functionality
  Change to preventErrorMessage() and let logger handle actual prevention?
* TODO Turn lexembuffer functions into methods on the buffer
  get/putLexZZZ() uses pointers to chars, why not a lexembuffer?
  When do we point to something not a lexembuffer?
* TODO Add yacc parser construct for field in yystype ('$<field>$')
* TODO Don't do any default operation (currently 'complete') if none given on command line
* TODO How is -olcxcplsearch and -olcxsearch supposed to work? (test_search...)
* TODO REFACTOR: Extract storage module interface and implementation
* TODO Architecture diagrams using C4-PlantUML - started in ...design.asciidoc
* TODO Fix javadoc not available (-olcxbrowse com.sun.org.apache.bcel.internal.generic.LADD in jexercise)
* TODO Why is -olcxbrowse concating the option number without '='? Any more options that do?
* TODO Better, and unified, options handling
There are both "-opt=value" and "-opt value" format options
** TODO If an option requires a value ('-<option>=..'), print an error message for '-<option>'
* TODO Remove FULL/FAST update, we always want correct info?
  There are a number of update modes available from the command line, 'fupdate',
  'updatem', 'update', 'fastupdate' and then there is opt.updateOnlyModifiedFiles
* TODO Make S_caching an abstract data type to hide CachePoint and Caching
* TODO MISSING TEST CASES:
** TODO Test case for Move Method
** TODO Test case for dead symbol detection
** TODO Test case for Move Parameter
** TODO Test case for Push Down Method
** TODO Test case for corruptionError() and compressionError()
** TODO Create jar reading test for unexpected end of file
* TODO NEW FEATURES:
** TODO New refactoring: change return type of function
** TODO New refactoring: Extract variable
** TODO Extract function should extract a boolean function inside an if() correctly
** TODO New refactoring: Inline variable ("a=f(); b(a);" => "b(f());")
** TODO FUTURE: Use clangd as backend - is that even possible
** TODO FUTURE: Implement LSP (Language Server Protocol)
** TODO New refactoring: move function for C
* TODO BUGS:
** TODO Double free when swapping refs while reading jar file
Test with jdk1.8.0_121_jre_lib_rt.jar in tests/test_jar_reading
** TODO bug_add_to_constructor_missinterpreted_if_not_int_arg_0
** TODO Bug: when extracting C function including declarations that are required
   by code left outside the extraction, that declaration is moved to the
   extracted function. This should probably trigger "structure error".
** TODO Bug: translates a bool to int when completing arguments (probably elsewhere also)
* TODO Separate the options into sections and move them to separate structures
  The S_options structure is used to save or possibly create new sets, when
  refactoring. Then it should only contain what's needed for that.
* TODO Make all modules independent on main
** DONE Document why main.h is needed
** DONE Make commons.c independent of main
** DOING Make options.c independent of main
** TODO Make cxref.c independent of main
** TODO Make refactory.c independent of main
   This probably requires a lot more understanding of refactory.c and why
   it is structured the way it is, it seems to be calling on itself and
   main processing. Also refactory task is always performed in a separate
   process, what happens if we specify -refactory as a PPC command?
* TODO Remove all -olcx commands that are not used by the editor interfaces?
* TODO Ensure each header file is not dependent on the fact that some other
  header file is included before it. (Could this be done by taking each
  header file and try to compile it in isolation? It should include
  whatever other things it needs...)
* TODO Ensure every file only includes what it needs so that dependencies
  are as small as possible. This is why IWYU exists!! It means "Include
  What You Use" and is a Clang related project at
  https://github.com/include-what-you-use/include-what-you-use)
* TODO Remove opt.xref2 since edit server mode is always called with this, isn't it?
  If so, make xref2 the way c-xref talks if in server mode. But this should also
  apply for refactory mode, right?
* TODO Cleanup and separate commons, misc and make them independent utility modules
* TODO Why does -refactory read the users default .c-xrefrc? And why does -no-stdoptions
  prevent reading explicit -xrefrc options?
* TODO Cannot mock structs as arguments like in symbol.mock
  We need to change pos to *pos if that's gonna work
* TODO Java home can be found using "java -XshowSettings:properties 2>&1 | grep java.home"
and you can also get java.class.version=55 => java version without decoding directory names
* TODO Ensure all ANSI-C, C99 and C11 keywords (and macros for them?) are
  recognized (list e.g. at
  http://www.c-programming-simple-steps.com/c-keywords.html)

* TODO Memory allocation is home grown, probably out of necessity. Refactor
  to a state where it can be replaced (at least as an experiment) by
  the memory allocation of current run-times. I can't see that even
  32-bit memory restrictions (2 GB) should be a problem. The caching
  might be tied into this, though.

* TODO Naming. Generally it is heavy on short, write-only naming, we should
  move towards full names as much as possible

** TODO Remove S_, s_ and other naming conventions
** TODO Use actual typedef names where ever possible
* TODO Macros. There are many things that might need the magic of macros, but we
  should watch out for "macro for optimisation" and remove that.

* TODO Modules. Better use of modules (Clean Code/Architecture/Hexagonal)
  The hash tables and lists are such candidates. If we do that it would be much
  easier to mock and unit test other modules.
** DONE Extract PPC-functions from misc.c into a ppc-module
* DONE Convert fillBits() with explicit setting of "properties" like access, storage etc.
* DONE Abstract refTab
** DONE Implement table functions as per other tables (getReferenceItem
* DONE Abstract editorBufferTable as per fileItemTable
* DONE Abstract away struct stat - figure out which parts are actually used
  ... so we don't need to store the whole st struct...
  "grep stat\\. *.c" indicates that the following are used:
  - st_mtime
  - st_size
  - st_mode (with S_IFDIF)
* DONE Can we remove -user option? YES! Emacs treats frames a users for different browsing contexts
* DONE Move XX_ALLOCC and friends to "memory" module
* DONE Turn the out parameter "position" of XXXTabAdd to return value instead, so it can be ignored without unused variable
* DONE Introduce adapter for stat() in fileio
We are only using the following attributes of the struct stat:
- st_mode : for file typing (DIR, REG, ...)
- st_size
- st_mtime
** DONE Introduce editorFileExists()
** DONE Introduce editorFileModificationTime() to replace stat.st_mtime query
** DONE Introduce editorFileSize() to replace stat.st_size query          
* DONE Include of <file> does not follow standard so Cgreen's 'internal/...' is not found
* DONE Use -trace and -debug to change level in log file only
* DONE Handle for-loops with declarations ("for (int i = 0;...")
** DONE Grammar changes for C and Yacc
** DONE Scope rules for loop variable, don't really understand how that works...
   Seems to be working?!??! Check that it does using push-go and extract.
* DONE Update to rxi/log.c of 2020 - requires reimplementing `log_with_line()`
* DONE Re-generate `c-xrefprotocol.el` on builds on src rather than on prod builds to avoid package update problems
* DONE Add menu for running the tutorial (in C or Java)
** TODO Elisp function to copy cexercise to /tmp and visit it
** TODO Elisp function to copy jexercise to /tmp and visit it
** TODO Menu for the two exercises
*** TODO Add end of old INSTALL to README.md
* DONE Investigate why test_uint32_t fails on some systems
Maybe they don't define the required standard types using header files, or we need some
flag for C99 compatibility? Should we revert to pre-defining the standard symbols?

Seems like the current strategy actually works...
* DONE Make C-xref->Misc->About show commit-id
* DONE Replace the -1/-2 return cases for getLexA() with longjmp(<reason>)
* DONE Implement non-standard #include_next since both gcc and clang is using it in system headers
* DONE Rename int2StringTabs, should not have Init in them
Yes, they should since they are the init data for some tables used at run-time. 
* DONE Unify the two documentation sets (html+txt) into Markdown
* DONE Fix the move_class test
* DONE Remove option brief_cxref - completely unnecessary
* DONE Current script for autodiscovered test_<case> does not abort when the test fails
* DONE Make all tests runable without debug build (-trace e.g.)
* DONE Make some tests (e.g. test_cexercise_browsing) independent on where standard includes are located
E.g. that test has "/usr/include" on Linux but "/Applications/X-code.app/.../SDKs/MacOSX.sdk/usr/include/" on MacOS
* DONE Some code in yacc semantic actions is not detected (try F6 on .reference)
  It seems that it is primarily java_parser.y that has this problem. See
  issue on github. One theory might be that "/*&" is not handled in
  yacc-files under some circumstances. There is a line in lex.c that
  handles this, we could see if it triggers...
* DONE Check if the C-part of Yacc grammar is identical, and if so extract it
* DONE Create testcases for all jexercise and cexercise steps
* DONE Remove zlib from repo, point to it's repo instead
* DONE Split out more specific tests from ?exercise tests, like "rename_with_conflicts"
* DONE Tool to convert debug log from Emacs/c-xref into commands for edit-server-driver.py
* DONE Introduce data driven strategy to find java runtime
Java up to v8 uses /bin/java[.exe], Java 9 and higher has no rt.jar at
all.
* DONE Read java runtime which now has many more options
** DONE Understand why reading jar takes up all memory
** DONE Support new class file constant pool items for v52.0
** DONE Crash when swapping CXrefs after reading jdk1.8.0_121_jre_lib_rt.jar
Actually not done, since swapping while reading jar file still crashes
* DONE Define face for completion that works for dark themes
* DONE c-xref-key-binding "local" should set M-TAB to completion
Well, actually not really done, but I found how to make M-TAB do completion...
* DONE Document that the "distribution" method is unsupported
* DONE Clean up documentation, primarily remove 'create_distribution'
* DONE Function-ify lexmac macros
* DONE Change structure declarations in proto.h into ideomatic struct
  {struct} typedefs instead of using typenames generated into the
  strTdef file. See NOTES.md. Few examples of strategy is implemented
  with cctNode and position. Primary benefit is to be able to use
  renaming on them...
* DONE Extract charbuf module
* DONE Make Makefile.common look for our patched yacc and if it's not
  available ignore yacc-rules otherwise always run yacc.
* DONE Initialize memory's injected error functions in main.c, but it still works?
* DONE Change all "-no_" options to modern "-no-"
* DONE Rename some of the options, like -no_str -> -no-structs
* DONE Re-fix #13, since it was reverted since it trashed extract for Java with local variables
* DONE Extract a lexembuffer module
* DONE Use enum types wherever possible Storage, SymbolType
  Which are left to do?
* DONE Unittests for memory module
* DONE Test for Java using JRegr sources
* DONE Remove enum generation by using CPP magic
  In order to
  - simplify the code by removing the whole generate regime
  - avoid regeneration different enum string sets on various platforms
  - be explicit about which enums that actually need string representations
  we will
  - replace re-generation of all enums with some macro magic to produce both
  enum values and strings in the modules themselves as part of the declaration

  We don't need the complex logic of the whole generate_regime if we
  only want to be able to print the strings for the values (see
  https://stackoverflow.com/a/10966395/204658)

  Currently all enums included are generated, but that includes ones
  that are in the systems headers which in turns creates different
  output. It is better to be precise about which you want to be generated.

  Currently only the following are actually used:
  - miscellaneous
  - referenceCategory (removed use of enumTxt for it)
  - storage (done)
  - type (done)
  - usage (done)

  Re-test this with "ls *.c | grep -v enumTxt | xargs grep -h -o '[^ ("*,]*EnumName\[[^ ]*' | sed -e 's/\[.*//g' | sort | uniq"
* DONE Replace "int lexem" with an enum for all lexems, "Lexem lexem"?
* DONE Start using log.c functions to log to a separate log file
  Adjust options so that we can better control logging for various
  modules(?)
** DONE Include and start using log()
** DONE Move output from log() from dumpOut to some logFile
* DONE Figure out a way to remove "commons.c 295" from all parser error messages
* DONE Don't overwrite enumTxt.g.[ch] if they are different, separate target?
  If the change creates broken (like empty) enum-files we should not just overwrite
  the working ones. Create a separate target to run to explicitly do that and say
  so in the output. E.g. "REGENERATED: inspect and do 'make enums' if correct"
* DONE Introduce -compiler option for C so that we can ensure discovery works
* DONE Remove the global tmpBuff
* DONE Introduce fileio layer for fopen, fread etc. and possibly copyFile...
* DONE Handle struct literals ("(type){.field = data, ...}")
** DONE Create test case
** DONE Create AST using parsing
** DONE Add as reference to the field
* DONE Add a test for reading class files (note only 1.4 max for now...)
* DONE Ensure that token declarations in the parsers are exactly the same
  They must be, but Yacc does not allow #include of a common file.
* DONE Investigate to remove S_classTreeData
* DONE Remove code for generation of str_fill & str_copy
* DONE Remove bootstrap step (strfill and local definitions)
** DONE Remove bootstrap enumTxt generation
   To retain the feature that some enums have there values as strings,
   and be sure that if we change the enum, those will change too. Instead
   of generating them as a pre-requisite we will generate them after.
** DONE Remove the need for FILL_xxx macros
   At this point there are 66, 65, 64, 63, 62, 41, 33, 15, 8 FILL-macros that are in use
*** DONE Remove position from proto.h
*** DONE Remove FILLF_typeModifier
*** DONE Remove chReference from proto.h
*** DONE Remove FILL_editor* from strFill
**** DONE Remove FILL_editorBuffer from strFill
***** DONE Move editorBuffer from proto.h to editor.h
*** DONE Remove FILL_chReference
*** DONE Remove cachePoint from proto.h
*** DONE Remove editorBuffer from proto.h
*** DONE Remove caching from proto.h
*** DONE Remove fileItem from proto.h
*** DONE Remove FILL_intlist
**** DONE Replace FILL_intList so we can remove strFill-dependency from classh.c
**** DONE Move intlist from proto.h to html.h
*** DONE Remove FILL_symbol()
***** DONE Remove #include "symbol" from proto.h
***** DONE semact.c requires FILL_symbolBits which are not strFill'ed
      if symbol.h is not in proto.h. We need to create fillSymbolBits()
***** DONE Replace 0 with ACC_DEFAULT in calls to fillSymbolBits()
****** DONE symtab.h: unknown type name Symbol: include symbol instead of proto
******* DONE hashlist.th bool
***** DONE Replace all FILL_symbol() calls
***** DONE Move Symbol struct to Symbol-module
***** DONE Create a Symbol module with newSymbolxxx() & fillSymbolxxx()
      The call pattern XX_ALLOC... FILL_symbolBits ... FILL_symbol is
      prominent. And if we remove all instances where a newSymbol() function
      returning a pointer would work that's a big step. Started on the
      "remove-fill-symbol" branch. There is still an issue in that the
      FILL_symbol macro takes one argument which is the name of the union
      field that the next argument should assign to (is this a general
      pattern for FILL-generation? Probably) Suggested solution is one
      newSymbol<field>() for each of the necessary fields that are actually used.
*** DONE Remove FILL_symbollist() macro
** DONE Remove generation of str_fill from build
** DONE Remove compiler_defines.h
*** DONE Re-work standard options, since reading included system files may
* DONE Remove all QNX-stuff
  depend on them. Think about calling compiler to get defines, much like
  generation of "compiler_defines.g.h" was done. Here's what that did to
  get a list of #defines:

  echo | gcc -dM -E -

  It should be possible to piggyback on the command line options
  handling. That is performed by the last lines in
  addMacroDefinedByOption().
* DONE Use Yacc's -p for "symbol_prefix" instead of the #defines?
* DONE Rename classh to classhierarchy
* DONE make memory.c (linkage) independent on all other modules
  One way to do this to inject the remaining, problematic, dependencies
  such as internalCheckFail(), removeFromTrailUntil() and fatalError()
* DONE Move all function prototypes from proto.h to <module>.h
* DONE Create test case for converting virtual function to static
* DONE Fix tests/olcx_refactor_rename gets "buf is not valid"
* DONE Rename all bb -> ast
* DONE enumTxt.c is a generated set of strings for the enum values in
  proto.h, but the extern declarations of them are in strTdef.g. A
  cleaner way would be to generate them into an "enumTxt.h" (or a
  better name, such as 'generated_enum_strings.h').
  ACTUALLY: split generation of enumTxt header to its own header file
  with the naming strategy as for the others.
* DONE Rename maTab to macroArgTab
* DONE Make fillSymbol() and newSymbol() set default symbolBits
  then we only need to set non-default values (which could be done
  using setType(), setStorage() and so on, functions
* DONE Remove FILLF_fileItem() by replacing it with fillFileItem()
** DONE Make hashTabAdd() return int rather than *int out arg
*** DONE Make IsMember() return position rather than out argument
**** DONE Replace fileTabIsMember() with fileTabExists()/fileTabLookup()
**** DONE Implement fileTabLookup()
*** DONE Make addFileTabItem return the position rather than out arg
**** DONE Cover jarFileParse() with test
* DONE Create a map of how structs are dependent on each other
* DONE Add an -exit option so that clients can take down server cleanly
* DONE Ensure only externally used functions are visible in the modules
  header file. And that only those are "non-static" in the C file.
* DONE Make edit_server_driver read output from pipespy
  Idea is to be able to record interactions and then re-play them
  with the driver.
* DONE Build a protocol spy that can be put between the editor and the
  server to inspect and learn about the communication. It should be
  fairly easy, just start up like c-xref does, start the real c-xref
  with the startup arguments. Shuffle all communication on to the other
  while logging the messages to a file.

* DONE Although generation of typedef's etc. in strTdef et al might be
  questioned we need to handle that for now, but at least let's add
  #ifndef guards so that any file that requires a typedef can include
  them without need to consider the order of the included
  files. (Until we get into a dependency loop...)

* DONE Change naming strategy for the bootstrap and generated
  files. "*.bs.h" is now a bootstrap file, while *.g.h" is the local
  generated one using the boostrap version of c-xref. Also a single
  header file for each of the generated files is now taking care of
  the BOOTSTRAPPING ifdef and include the correct bootstrap or
  generated file.

* DONE Unit tests. There are now some simple ones. We need to get some working as
  quickly as possible. Meanwhile there are some functional level tests
  in ../tests, but as all integrating tests with I/O they are quite
  slow. (And some only work on huge data, because that was the test
  case given for some issues, and I really want to have a test case
  for each issue before fixing it, if possible.)

* DONE Make yacc parsing allowed the default. Change Makefile.common so
  that YACCALLOWED is reversed, i.e. if you *don't* want yacc parsing
  in the build c-xref set EXCLUDE_YACC_PARSING (or something similar)
  ACTUALLY: removed conditionals around that code, and kept the CCC
  conditionals.

* DONE Refactor out the hashtables and lists to separate modules.
* DONE Fix byacc skeleton to "goto <non-used label>" by remove ifdef around "lint"
