/* -*- c -*-*/
#include "semact.h"
#include <cgreen/mocks.h>

void fillStructMemberFindInfo(StructMemberFindInfo *info, Symbol *currentStructure,
                              Symbol *nextRecord, unsigned memberFindCount) {
    info->currentStructure     = currentStructure;
    info->nextMember           = nextRecord;
    info->memberFindCount      = memberFindCount;
    info->superClassesCount    = 0;
    info->anonymousUnionsCount = 0;
}

void initSymStructSpec(StructSpec *symStruct, Symbol *records) {
    mock(symStruct, records);
}

void unpackPointers(Symbol *pp) {
    mock(pp);
}

bool displayingErrorMessages(void) {
    return (int) mock();
}

void noSuchMemberError(char *memberName) {
    mock(memberName);
}

void deleteSymDef(void *p) {
    mock(p);
}

void addSymbolToFrame(SymbolTable *tab, Symbol *pp) {
    mock(pp, tab);
}

void memberFindPush(Symbol *sym, StructMemberFindInfo *rfs) {
    mock(sym, rfs);
}

StructMemberFindInfo *initFind(Symbol *s, StructMemberFindInfo *rfs) {
    return (StructMemberFindInfo *) mock(s, rfs);
}

Result findStructureMemberSymbol(Symbol **res, StructMemberFindInfo *ss, char *recname) {
    return (Result) mock(ss, recname, res);
}

Symbol *addNewSymbolDefinition(SymbolTable *table, char *fileName, Symbol *symbol, Storage storage, UsageKind usage) {
    return (Symbol *) mock(symbol, fileName, storage, table, usage);
}

Symbol *addNewDeclaration(SymbolTable *table, Symbol *baseType, Symbol *declaration, IdList *idList, Storage storage) {
    return (Symbol *) mock(baseType, declaration, idList, storage, table);
}

int styyerror(char *s) {
    return (int) mock(s);
}

int styyErrorRecovery(void) {
    return (int) mock();
}

void setToNull(void *p) {
    mock(p);
}

Symbol *typeSpecifier1(unsigned t) {
    return (Symbol *) mock(t);
}

void declTypeSpecifier1(Symbol *d, Type type) {
    mock(d, type);
}

Symbol *typeSpecifier2(TypeModifier *t) {
    return (Symbol *) mock(t);
}

void declTypeSpecifier2(Symbol *d, TypeModifier *t) {
    mock(d, t);
}

TypeModifier *addComposedTypeToSymbol(Symbol *symbol, Type type) {
    return (TypeModifier *)mock(symbol, type);
}

TypeModifier *appendComposedType(TypeModifier **d, Type type) {
    return (TypeModifier *) mock(d, type);
}

void completeDeclarator(Symbol *t, Symbol *d) {
    mock(t, d);
}

void addFunctionParameterToSymTable(SymbolTable *table, Symbol *function, Symbol *parameter, int position) {
    mock(function, parameter, position, table);
}

SymbolList *createDefinitionList(Symbol *symbol) {
    return (SymbolList *) mock(symbol);
}

Symbol *createSimpleDefinition(Storage storage, Type type, Id *id) {
    return (Symbol *) mock(storage, type, id);
}

int findStructureMember(Symbol *symbol, char *recname, Symbol **res) {
    return (int) mock(symbol, recname, res);
}

Reference *findStuctureMemberFromSymbol(Symbol *str, Id *record, Symbol **res) {
    return (Reference *) mock(str, record, res);
}

Reference *findStructureFieldFromType(TypeModifier *structure, Id *field, Symbol **resultingSymbol) {
    return (Reference *) mock(structure, field, resultingSymbol);
}

Result mergeArguments(Symbol *id, Symbol *ty) {
    return (Result) mock(id, ty);
}

TypeModifier *simpleStrUnionSpecifier(Id *typeName, Id *id, UsageKind usage) {
    return (TypeModifier *) mock(typeName, id, usage);
}

TypeModifier *createNewAnonymousStructOrUnion(Id *typeName) {
    return (TypeModifier *) mock(typeName);
}

void specializeStrUnionDef(Symbol *sd, Symbol *rec) {
    mock(sd, rec);
}

TypeModifier *simpleEnumSpecifier(Id *id, UsageKind usage) {
    return (TypeModifier *) mock(id, usage);
}

void setGlobalFileDepNames(char *iname, Symbol *pp, int memory) {
    char **pp_name = &pp->name;
    mock(iname, pp, pp_name, memory);
}

TypeModifier *createNewAnonymousEnum(SymbolList *enums) {
    return (TypeModifier *) mock(enums);
}

void appendPositionToList(PositionList **list, Position *pos) {
    mock(list, pos);
}

void setParamPositionForFunctionWithoutParams(Position *lpar) {
    mock(lpar);
}

void setParamPositionForParameter0(Position *lpar) {
    mock(lpar);
}

void setParamPositionForParameterBeyondRange(Position *rpar) {
    mock(rpar);
}

Symbol *createEmptyField(void) {
    return (Symbol *) mock();
}

void handleDeclaratorParamPositions(Symbol *decl, Position *lpar, PositionList *commas, Position *rpar, bool hasParam, bool isVoid) {
    mock(decl, lpar, commas, rpar, hasParam, isVoid);
}

void handleInvocationParamPositions(Reference *ref, Position *lpar, PositionList *commas, Position *rpar, bool hasParam) {
    mock(ref, lpar, commas, rpar, hasParam);
}

void setLocalVariableLinkName(struct symbol *p) {
    mock(p);
}

void labelReference(Id *id, UsageKind usage) {
    mock(id, usage);
}

void generateInternalLabelReference(int counter, int usage) {
    mock(counter, usage);
}
