/* -*- c -*-*/
#include "symbol.h"
#include <cgreen/mocks.h>


Symbol *newSymbol(char *name, char *linkName, Position pos) {
    return (Symbol*)mock(name, linkName);
}

Symbol *newSymbolAsCopyOf(Symbol *original) {
    return (Symbol*)mock(original);
}

void fillSymbol(Symbol *symbol, char *name, char *linkName, Position pos) {
    symbol->name = name;
    symbol->linkName = linkName;
    symbol->pos = pos;
    symbol->u.typeModifier = NULL;
    symbol->next = NULL;
    symbol->isExplicitlyImported = false;
    symbol->javaSourceIsLoaded = false;
    symbol->javaClassIsLoaded = false;
    symbol->access = AccessDefault;
    symbol->type = TypeDefault;
    symbol->storage = StorageDefault;
    symbol->npointers = 0;
}

void fillSymbolWithTypeModifier(Symbol *symbol, char *name, char *linkName, Position pos,
                                struct typeModifier *typeModifier) {
    fillSymbol(symbol, name, linkName, pos);
    symbol->u.typeModifier = typeModifier;
}

void fillSymbolWithLabel(Symbol *symbol, char *name, char *linkName, Position pos, int labelIndex) {
    fillSymbol(symbol, name, linkName, pos);
    symbol->u.labelIndex = labelIndex;
}

Symbol *newSymbolAsKeyword(char *name, char *linkName, Position pos, int keyWordVal) {
    return (Symbol *)mock(name, linkName, keyWordVal);
}

Symbol *newSymbolAsType(char *name, char *linkName, Position pos, struct typeModifier *type) {
    return (Symbol *)mock(name, linkName, type);
}

Symbol *newSymbolAsEnum(char *name, char *linkName, Position pos, struct symbolList *enums) {
    return (Symbol *)mock(name, linkName, enums);
}

Symbol *newSymbolAsLabel(char *name, char *linkName, Position pos, int labelIndex) {
    return (Symbol *)mock(name, linkName, labelIndex);
}

extern Symbol makeSymbol(char *name, char *linkName, Position pos) {
    Symbol *symbolP = (Symbol *)mock(name, linkName, &pos);
    Symbol symbol = *symbolP;
    free(symbolP);
    return symbol;
}

Symbol makeSymbolWithBits(char *name, char *linkName, Position pos,
                          Access access, Type type, Storage storage) {
    Symbol *symbolP = (Symbol *)mock(name, linkName, &pos, access, type, storage);
    Symbol symbol = *symbolP;
    free(symbolP);
    return symbol;
}

void getSymbolCxrefProperties(Symbol *symbol, ReferenceCategory *categoryP, ReferenceScope *scopeP, Storage *storageP) {
    mock(symbol, categoryP, scopeP, storageP);
}
