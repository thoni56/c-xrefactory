/* -*- c -*-*/
#include "editor.h"
#include <cgreen/mocks.h>


EditorUndo *editorUndo;


void editorInit(void) {
  mock();
}

EditorMarker *newEditorMarker(EditorBuffer *buffer, unsigned offset) {
    return (EditorMarker *)mock(buffer, offset);
}

EditorRegionList *newEditorRegionList(EditorMarker *begin, EditorMarker *end, EditorRegionList *next) {
    return (EditorRegionList *)mock(begin, end, next);
}

bool editorFileExists(char *path) {
    return (bool)mock(path);
}

time_t editorFileModificationTime(char *path) {
    return (time_t)mock(path);
}

size_t editorFileSize(char *path) {
    return (time_t)mock(path);
}

int editorFileStatus(char *path) {
  return (int) mock(path);
}

bool editorMarkerBefore(EditorMarker *m1, EditorMarker *m2) {
  return (int) mock(m1, m2);
}

bool editorMarkerAfter(EditorMarker *m1, EditorMarker *m2) {
  return (int) mock(m1, m2);
}

bool editorMarkerListBefore(EditorMarkerList *l1, EditorMarkerList *l2) {
  return (int) mock(l1, l2);
}

bool editorRegionListBefore(EditorRegionList *l1, EditorRegionList *l2) {
  return (int) mock(l1, l2);
}

EditorMarker *newEditorMarkerForPosition(Position pos) {
    Position *position = &pos;
    return (EditorMarker *) mock(position);
}

EditorMarkerList *convertReferencesToEditorMarkers(Reference *refs) {
  return (EditorMarkerList *) mock(refs);
}

Reference *convertEditorMarkersToReferences(EditorMarkerList **mms) {
  return (Reference *) mock(mms);
}

void replaceStringInEditorBuffer(EditorBuffer *buff, int position, int delsize, char *str, int strlength, EditorUndo **undo) {
  mock(buff, position, delsize, str, strlength, undo);
}

void moveBlockInEditorBuffer(EditorMarker *dest, EditorMarker *src, int size, EditorUndo **undo) {
  mock(dest, src, size, undo);
}

void dumpEditorBuffer(EditorBuffer *buff) {
  mock(buff);
}

void dumpEditorBuffers(void) {
  mock();
}

void editorDumpMarker(EditorMarker *mm) {
  mock(mm);
}

void editorDumpMarkerList(EditorMarkerList *mml) {
  mock(mml);
}

void editorDumpRegionList(EditorRegionList *mml) {
  mock(mml);
}

void quasiSaveModifiedEditorBuffers(void) {
  mock();
}

void loadAllOpenedEditorBuffers(void) {
  mock();
}

EditorMarker *createNewEditorMarker(EditorBuffer *buffer, int offset) {
  return (EditorMarker *) mock(buffer, offset);
}

EditorMarker *duplicateEditorMarker(EditorMarker *mm) {
  return (EditorMarker *) mock(mm);
}

int countLinesBetweenEditorMarkers(EditorMarker *m1, EditorMarker *m2) {
  return (int) mock(m1, m2);
}

bool runWithEditorMarkerUntil(EditorMarker *m, int (*until)(int), int step) {
  return (bool) mock(m, until, step);
}

int moveEditorMarkerToNewline(EditorMarker *m, int direction) {
  return (int) mock(m, direction);
}

int editorMoveMarkerToNonBlank(EditorMarker *m, int direction) {
  return (int) mock(m, direction);
}

int moveEditorMarkerBeyondIdentifier(EditorMarker *m, int direction) {
  return (int) mock(m, direction);
}

int moveEditorMarkerToNonBlankOrNewline(EditorMarker *m, int direction) {
  return (int) mock(m, direction);
}

void removeBlanksAtEditorMarker(EditorMarker *mm, int direction, EditorUndo **undo) {
  mock(mm, direction, undo);
}

void editorDumpUndoList(EditorUndo *uu) {
  mock(uu);
}

void moveEditorMarkerToLineAndColumn(EditorMarker *m, int line, int col) {
  mock(m, line, col);
}

void editorMarkersDifferences(EditorMarkerList **list1, EditorMarkerList **list2, EditorMarkerList **diff1, EditorMarkerList **diff2) {
  mock(list1, list2, diff1, diff2);
}

void freeEditorMarker(EditorMarker *marker) {
  mock(marker);
}

void freeEditorMarkerListButNotMarkers(EditorMarkerList *occs) {
  mock(occs);
}

void freeEditorMarkersAndRegionList(EditorRegionList *occs) {
  mock(occs);
}

void sortEditorRegionsAndRemoveOverlaps(EditorRegionList **regions) {
  mock(regions);
}

void splitEditorMarkersWithRespectToRegions(EditorMarkerList **inMarkers, EditorRegionList **inRegions, EditorMarkerList **outInsiders, EditorMarkerList **outOutsiders) {
  mock(inMarkers, inRegions, outInsiders, outOutsiders);
}

void restrictEditorMarkersToRegions(EditorMarkerList **mm, EditorRegionList **regions) {
  mock(mm, regions);
}

EditorMarker *createEditorMarkerForBufferBegin(EditorBuffer *buffer) {
  return (EditorMarker *) mock(buffer);
}

EditorMarker *createEditorMarkerForBufferEnd(EditorBuffer *buffer) {
  return (EditorMarker *) mock(buffer);
}

EditorRegionList *createEditorRegionForWholeBuffer(EditorBuffer *buffer) {
  return (EditorRegionList *) mock(buffer);
}

void freeEditorMarkersAndMarkerList(EditorMarkerList *occs) {
  mock(occs);
}

int editorMapOnNonexistantFiles(char *dirname, void (*fun)(MAP_FUN_SIGNATURE), SearchDepth depth,
                                char *a1, char *a2, Completions *a3, void *a4, int *a5) {
  return (int) mock(dirname, fun, depth, a1, a2, a3, a4, a5);
}

void closeEditorBufferIfCloseable(char *name) {
  mock(name);
}

void closeAllEditorBuffersIfClosable(void) {
  mock();
}

void closeAllEditorBuffers(void) {
  mock();
}

// Hopefully temporary while extracting EditorBuffer module
void freeTextSpace(char *space, int index) {
    mock(space, index);
}

void loadFileIntoEditorBuffer(EditorBuffer *buffer, time_t modificationTime, size_t fileSize) {
    mock(buffer, modificationTime, fileSize);
}

void allocateNewEditorBufferTextSpace(EditorBuffer *buffer, int size) {
    mock(buffer, size);
}
