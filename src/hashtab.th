/* **********************************************************************

   .h template for hashed table

   Can be included many times because its a generator, not an
   interface.

   For an explanation of how these hashed tables and list are
   generated, see hashtab.tc

*/

#include <stdbool.h>

#define GLUE(a,b) a ## b
#define CONCAT(a,b) GLUE(a,b)

/* FUN_PREFIX is the same as TAB_NAME */
#define HASH_FUN_PREFIX HASH_TAB_NAME

typedef struct HASH_TAB_NAME {
    int size;
    int numberOfElements;
    HASH_ELEM_TYPE **tab;				/* *tab[size];*/
} HASH_TAB_TYPE;


extern void CONCAT(HASH_FUN_PREFIX, Init) (		/* Init */
    HASH_TAB_TYPE *table,
    int size
);

extern void CONCAT(HASH_FUN_PREFIX, NoAllocInit) ( /* Init but don't allocate the entries */
    HASH_TAB_TYPE *table,
    int size
);

extern bool CONCAT(HASH_FUN_PREFIX, IsMember) (	/* IsMember */
    HASH_TAB_TYPE *table,
    HASH_ELEM_TYPE *element,
    int *position
);

extern int CONCAT(HASH_FUN_PREFIX, Add) (		/* Add, returns index a.k.a fileNumber */
    HASH_TAB_TYPE *table,
    HASH_ELEM_TYPE *element
);

extern void CONCAT(HASH_FUN_PREFIX, Map) (
    HASH_TAB_TYPE *table,
    void (*fun) (HASH_ELEM_TYPE *)
);

extern void CONCAT(HASH_FUN_PREFIX, MapWithIndex) (
    HASH_TAB_TYPE *table,
    void (*fun) (HASH_ELEM_TYPE *, int)
);

extern void CONCAT(HASH_FUN_PREFIX, MapWithPointer) (
    HASH_TAB_TYPE *table,
    void (*fun) (HASH_ELEM_TYPE *, void *),
    void *a
);

#undef GLUE
#undef CONCAT
#undef HASH_FUN_PREFIX

/* Local variables: */
/* Mode: c          */
/* End:             */
