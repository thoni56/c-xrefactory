/*
  .c template for hashed table

  Should be included only in a .c file

  Requires the following macros to be set:
  HASH_TAB_NAME - name of struct and function prefix
  HASH_TAB_TYPE - name of resulting type
  HASH_ELEM_TYPE - type of elements
  HASH_FUN(elem) - function to generate hash value
  HASH_ELEM_EQUAL(e1,e2) - function/expression to used when comparing for equality

  The first three should be set by the inclusion of an .h file which
  in turn includes hashtab.th.

  E.g. in xyztable.h:

      #define HASH_TAB_NAME xyzTable
      #define HASH_TAB_TYPE XyzTable
      #define HASH_ELEM_TYPE Xyz

      #include "hashtab.th"
      ...

  and then in the .c file:

      #include "xyztable.h"

      #define HASH_FUN(elem) hash(elem)
      #define HASH_ELEM_EQUAL(e1,e2) eq(e1,e2)

      #include "hashtab.tc"
      ...

  It is also good practice to undef in the .h file to avoid clashing
  with other header files using hashtab/list:

      #ifndef _IN_XYZTABLE_C_
      #undef HASH_TAB_NAME
      #undef HASH_ELEM_TYPE
      #endif

  If your .c file needs to generate multiple hash tables/lists you
  also need to undef the following after each inclusion of
  'hashtab.tc':

      #undef HASH_FUN
      #undef HASH_ELEM_EQUAL

  Hint: run the following command in shell to see the expanded
  declarations:

      gcc -E <module>.h

*/


#include <string.h>             /* For memset() */

#include "log.h"
#include "misc.h" /* For XX_ALLOCC */
#include "proto.h"
#include "stackmemory.h"

#define GLUE(a,b) a ## b
#define CONCAT(a,b) GLUE(a,b)

/* FUN_PREFIX is the same as TAB_NAME */
#define HASH_FUN_PREFIX HASH_TAB_NAME

#define HASH_SHIFT 211

/* Initialize only, no allocation */
void CONCAT(HASH_FUN_PREFIX,NoAllocInit)(HASH_TAB_TYPE *t, int size) {
    t->numberOfElements = 0;
    t->size = size;
    memset(t->tab, 0, sizeof(HASH_ELEM_TYPE*)*t->size);
}

/* Allocate and initialize */
void CONCAT(HASH_FUN_PREFIX,Init)(HASH_TAB_TYPE *table, int size) {
    table->tab = stackMemoryAlloc(size*sizeof(HASH_ELEM_TYPE *));
    CONCAT(HASH_FUN_PREFIX,NoAllocInit)(table, size);
}

/* Check for membership, will return position if found, next free if
 * not, use position == null if you're not interested in it */
bool CONCAT(HASH_FUN_PREFIX,IsMember)(
    HASH_TAB_TYPE *table,
    HASH_ELEM_TYPE *element,
    int *position /* OUT */
) {
    unsigned posid;
    posid = HASH_FUN(element);
    posid = posid % table->size;

    assert(table->tab!=NULL);
    while (table->tab[posid] != NULL) {
        if (HASH_ELEM_EQUAL(table->tab[posid], element)) {
            *position = posid;
            return true;
        }
        posid=(posid+HASH_SHIFT) % table->size;
    }
    if (position)
        *position = posid;
    log_trace("not found, returning %d", posid);
    return false;
}

int CONCAT(HASH_FUN_PREFIX,Add) (
    HASH_TAB_TYPE *table,
    HASH_ELEM_TYPE *element
) {
    /* In order to simplify things we do not want IsMember to
       return a position, that should be done when needed. So we
       recalculate the position here... */
    unsigned posid;

    posid = HASH_FUN(element);
    posid = posid % table->size;
    assert(table->tab!=NULL);
    while (table->tab[posid] != NULL) {
        if (HASH_ELEM_EQUAL(table->tab[posid], element)) {
            return posid;
        }
        posid=(posid+HASH_SHIFT) % table->size;
    }
    table->numberOfElements ++;
    if ((table->numberOfElements * 9) / 8 >= table->size) {
        FATAL_ERROR(ERR_ST, "[hashAdd] file table overflowed", XREF_EXIT_ERR);
    }
    table->tab[posid] = element;
    return posid;
}

void CONCAT(HASH_FUN_PREFIX,Map)(
    HASH_TAB_TYPE *table,
    void (*fun)(HASH_ELEM_TYPE *)
) {
    for (int i=0; i<table->size; i++) {
        if (table->tab[i]!=NULL) (*fun)(table->tab[i]);
    }
}

void CONCAT(HASH_FUN_PREFIX,MapWithIndex)(
    HASH_TAB_TYPE *table,
    void (*fun)(HASH_ELEM_TYPE *elem, int index)
) {
    for (int i=0; i<table->size; i++) {
        if (table->tab[i]!=NULL) (*fun)(table->tab[i], i);
    }
}

void CONCAT(HASH_FUN_PREFIX,MapWithPointer)(
    HASH_TAB_TYPE *table,
    void (*fun)(HASH_ELEM_TYPE *, void *),
    void *a
) {
    for (int i=0; i<table->size; i++) {
        if (table->tab[i]!=NULL)
            (*fun)(table->tab[i], a);
    }
}

#undef GLUE
#undef CONCAT
#undef HASH_TAB_TYPE
#undef HASH_FUN_PREFIX

/* Local variables: */
/* Mode: c          */
/* End:             */
