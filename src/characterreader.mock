/* -*- c -*-*/
#include "characterreader.h"
#include <cgreen/mocks.h>

static z_stream emptyZStream = {NULL,};

/* We never want to mock init-functions... */
/* NB: copies of the actual functions... */
void fillCharacterBuffer(CharacterBuffer *characterBuffer,
                         char *next,
                         char *end,
                         FILE *file,
                         unsigned filePos,
                         int fileNumber,
                         char *lineBegin) {
    characterBuffer->next = next;
    characterBuffer->end = end;
    characterBuffer->file = file;
    characterBuffer->filePos = filePos;
    characterBuffer->fileNumber = fileNumber;
    characterBuffer->lineNumber = 0;
    characterBuffer->lineBegin = lineBegin;
    characterBuffer->columnOffset = 0;
    characterBuffer->isAtEOF = false;
    characterBuffer->inputMethod = INPUT_DIRECT;
    characterBuffer->zipStream = emptyZStream;
}

void initCharacterBuffer(CharacterBuffer *characterBuffer, FILE *file) {
    fillCharacterBuffer(characterBuffer, characterBuffer->chars, characterBuffer->chars,
                        file, 0, -1, characterBuffer->chars);
    mock(characterBuffer, file);
}


/* Here be mocks... */

bool refillBuffer(CharacterBuffer *buffer) {
    return (int) mock(buffer);
}

void switchToZippedCharBuff(CharacterBuffer *buffer) {
    mock(buffer);
}

int columnPosition(CharacterBuffer *cb) {
    return (int)mock(cb);
}

int absoluteFilePosition(CharacterBuffer *cb) {
    return (int)mock(cb);
}

int skipBlanks(CharacterBuffer *cb, int ch) {
    int r = (int)mock(cb, ch);
    if (getenv("TRACE_MOCKS"))
        printf("skipBlanks(): returning '%c'\n", r);
    return r;
}

int skipWhiteSpace(CharacterBuffer *cb, int ch) {
    int r = (int)mock(cb, ch);
    if (getenv("TRACE_MOCKS"))
        printf("skipWhiteSpace(): returning '%c'\n", r);
    return r;
}

void skipCharacters(CharacterBuffer *buffer, unsigned count) {
    mock(buffer, count);
    if (getenv("TRACE_MOCKS"))
        printf("skipCharacters(): skipping %d\n", count);
}

int getChar(CharacterBuffer *cb) {
    int r = (int)mock(cb);
    if (getenv("TRACE_MOCKS"))
        printf("getChar(): returning '%c'\n", r);
    return r;
}

void ungetChar(CharacterBuffer *cb, int ch) {
    (void)mock(cb, ch);
}

void closeCharacterBuffer(CharacterBuffer *buffer) {
    mock(buffer);
}
