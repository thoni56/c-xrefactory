//////////////////////////////////////////////////////////////////////
In this Asciidoc document we use the convention that one sentence is kept on a single line.
This creates nice diffs.
//////////////////////////////////////////////////////////////////////
:source-highlighter: highlightjs
:icons: font
:numbered:
:toc: left
:pp: ++
:title-page:
ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

= C-xrefactory - a C/Yacc/Java refactoring and code browsing tool - Design Documentation
v{VERSION} - Generated {localdate}

== Intro

== Context

[plantuml, c4-diagram, png]
....
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

!define SPRITESURL https://raw.githubusercontent.com/plantuml-stdlib/gilbarbara-plantuml-sprites/v1.0/sprites
!include SPRITESURL/emacs.puml

LAYOUT_WITH_LEGEND()

Person(developer, "Developer", "Edits source code using an editor")
System(editor, "Editor", "Allows Developer to modify source code and perform refactoring operations", $sprite="emacs")
SystemDb(sourceCode, "Source Code")
System_Boundary(cxref, "c-xrefactory Browser") {
  Container(editorExtension, "Editor Extension", "Plugin", "Extends the Editor with c-xref operations and interfaces to the c-xrefactory API")
  Container(cxrefCore, "c-xref", "C Language program", "Refactoring Browser core")
  Container(settingsStore, "settings", "Non-standard format settings file", "Configuration file for project settings")
  ContainerDb(tagsDB, "tagsDB", "Source Code information storage", "Stores all information about the source code in the project which is updated by scanning all or parts of it when required.")
}

Rel(cxrefCore, settingsStore, "read")
Rel(editorExtension, settingsStore, "writes", "new project wizard")
Rel(editorExtension, cxrefCore, "API", "To request information and get modified code")
Rel(developer, editor, "GUI", "Usual editor/IDE operations")
Rel(editor, editorExtension, "Extends", "Editors extension protocol")
Rel(developer, settingsStore, "edit")
Rel(cxrefCore, tagsDB, "read/write")
Rel(cxrefCore, sourceCode, "read/analyze")
Rel(editor, sourceCode, "normal editing operations")
Rel(editorExtension, sourceCode, "extended c-xrefactory operations")
....

== Data Structures

There is a lot of different data structures used in `c-xrefactory`.
This is a first step towards visualising them.

=== Symbols and References

So, why is there no connection between the symbols and the references?!?

[plantuml, png]
....
class Symbol
Symbol : char *name
Symbol : Position position
Symbol : SymbolBits bits
Symbol -> Symbol :  next

class SymbolList
SymbolList -> SymbolList : next
SymbolList -> Symbol : symbol

class ReferencesItem
ReferencesItem : char *name
ReferencesItem : ReferencesBits bits
ReferencesItem -> Reference : references
ReferencesItem -> ReferencesItem : next

class Reference
Reference : Usage usage
Reference : Position position
Reference -> Reference : next
....

== Development Practices

=== Utilities

==== Covers

`utils/covers.py` is a Python script that, in some enviroments, can list which test cases execute a particular line.

This is handy when you want to debug or step through a particular part of the code.
Find a test that covers that particular line and run it using the debugger (usually `make debug` in the test directory).

Synopsis:

    covers.py <file> <line>

